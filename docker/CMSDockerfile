FROM php:8.1-fpm-alpine as build

#Installing libraries
RUN apk add --update \
libpng-dev \
icu-dev \
libzip-dev \
autoconf \
freetype-dev \
libjpeg-turbo-dev \
nginx \
build-base \
openssh \
git \
patch \
supervisor \
&& rm -rf /var/cache/apk/* \
# "zip" extension warns about deprecation if we do not use a system library
&& docker-php-ext-configure zip \
# "gd" extension needs to have specified jpeg and freetype dir for jpg/jpeg images support
&& docker-php-ext-configure gd --with-freetype=/usr/include/ --with-jpeg=/usr/include/ \
# redis PHP extension is not provided with the PHP source and must be installed via PECL, build-base used only for installation
&& apk add --update build-base && pecl install redis && docker-php-ext-enable redis && apk del build-base \
# install necessary PHP extensions
&& docker-php-ext-install \
bcmath \
gd \
intl \
opcache \
zip \
pdo_mysql \
# Production container
&& mv $PHP_INI_DIR/php.ini-production $PHP_INI_DIR/php.ini \
#Creating php ini for cli
&& cp $PHP_INI_DIR/php.ini $PHP_INI_DIR/conf.d/docker-php-ext-cli.ini \
#chaning memory limit for php cli
&& sed -i 's/128M/512M/g' $PHP_INI_DIR/conf.d/docker-php-ext-cli.ini
COPY ./docker/php/www.conf /usr/local/etc/php-fpm.d/
COPY ./docker/php/php-fpm.conf /user/local/etc/php-fpm.conf
COPY ./docker/php/uploads.ini $PHP_INI_DIR/conf.d/
#prepare nginx pid file
RUN mkdir /etc/nginx/pid/
#copy nginx configuration files
COPY ./docker/nginx/site.conf /etc/nginx/conf.d/default.conf
COPY ./docker/nginx/nginx.conf /etc/nginx/nginx.conf
#copy supervisord configuration file into supervisord conf
COPY ./docker/supervisord/supervisord.conf /etc/supervisord.conf
#copy supervisor worker config file
COPY ./docker/supervisord/worker.conf /etc/worker.conf
#Logs to stdout
RUN ln -sf /dev/stdout /var/log/nginx/access.log \
    && ln -sf /dev/stderr /var/log/nginx/error.log
#Install Composer
ENV COMPOSER_VERSION 2.2.6
RUN	curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer --version=${COMPOSER_VERSION} && \
	chmod +x /usr/local/bin/composer
# Prepare required directories for Newrelic installation
RUN mkdir -p /var/log/newrelic /var/run/newrelic && \
    touch /var/log/newrelic/php_agent.log /var/log/newrelic/newrelic-daemon.log && \
    chmod -R g+ws /tmp /var/log/newrelic/ /var/run/newrelic/ && \
    chown -R 1001:0 /tmp /var/log/newrelic/ /var/run/newrelic/ && \
    export NEWRELIC_VERSION=$(curl -sS https://download.newrelic.com/php_agent/release/ | sed -n 's/.*>\(.*linux-musl\).tar.gz<.*/\1/p') && \
    cd /tmp && curl -sS "https://download.newrelic.com/php_agent/release/${NEWRELIC_VERSION}.tar.gz" | gzip -dc | tar xf - && \
    cd "${NEWRELIC_VERSION}" && \
    NR_INSTALL_SILENT=true ./newrelic-install install && \
    rm -f /var/run/newrelic-daemon.pid && \
    rm -f /tmp/.newrelic.sock && \
    sed -i \
        -e 's/newrelic.license =.*/newrelic.license = ${NEW_RELIC_LICENSE_KEY}/' \
        -e 's/newrelic.appname =.*/newrelic.enabled = ${NEW_RELIC_ENABLED}/' \
        /usr/local/etc/php/conf.d/newrelic.ini && \
    echo 'newrelic.appname=${NEW_RELIC_APP_NAME}' >> /usr/local/etc/php/conf.d/newrelic.ini
#Create dir for nginx pid file
RUN mkdir -p /run/nginx/

FROM build as production
WORKDIR /var/www/html
COPY . /var/www/html
RUN composer install

EXPOSE 80
STOPSIGNAL SIGTERM
# Start supervisord
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisord.conf"]

FROM build as dev
WORKDIR /var/www/html

## Install XDebug
COPY docker/php/xdebug.ini $PHP_INI_DIR/conf.d/docker-php-ext-xdebug.ini

RUN apk add --no-cache $PHPIZE_DEPS \
&& pecl install xdebug-3.1.2 \
&& docker-php-ext-enable xdebug

RUN apk add mysql-client
RUN apk add sudo

EXPOSE 80
STOPSIGNAL SIGTERM
# Start supervisord
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisord.conf"]
